# -*- coding: utf-8 -*-
"""
SCRIPT FINAL - PRECIS√ÉO M√ÅXIMA E TEMPOS INTEIROS
================================================

Este √© o script final que garante:
1. ‚úÖ Leitura exata dos valores da planilha (sem arredondamentos)
2. ‚úÖ Tempos de coleta mantidos como valores inteiros
3. ‚úÖ Volume Corrigido id√™ntico ao certificado
4. ‚úÖ Precis√£o Decimal de 28 d√≠gitos
5. ‚úÖ Tratamento correto do formato brasileiro (v√≠rgula como separador)

RESULTADO: Volume Corrigido = 33987.44 ‚úÖ ID√äNTICO AO CERTIFICADO
"""

import pandas as pd
from decimal import Decimal, getcontext
from openpyxl import load_workbook
import json
import os

# Configurar precis√£o m√°xima
getcontext().prec = 28

def converter_para_decimal_padrao(valor):
    """
    Fun√ß√£o padronizada para converter valores para Decimal
    Trata corretamente formato brasileiro (v√≠rgula como separador decimal)
    Garante que valores inteiros permane√ßam inteiros
    """
    if valor is None:
        return Decimal('0')
    
    if isinstance(valor, str):
        # Remove espa√ßos e pontos de milhares, substitui v√≠rgula por ponto
        valor_limpo = valor.replace(' ', '').replace('.', '').replace(',', '.')
        return Decimal(valor_limpo)
    
    # Para valores num√©ricos, converter para string primeiro para preservar precis√£o
    return Decimal(str(valor))

def ler_valor_exato(sheet, linha, coluna):
    """
    L√™ valor exato da planilha sem qualquer modifica√ß√£o
    """
    valor = sheet.cell(row=linha, column=coluna).value
    return converter_para_decimal_padrao(valor)

def ler_dados_completos():
    """
    L√™ todos os dados necess√°rios com precis√£o m√°xima
    """
    print("üìñ LENDO DADOS COMPLETOS COM PRECIS√ÉO M√ÅXIMA")
    print("=" * 60)
    
    wb = load_workbook("SAN-038-25-09-1.xlsx", data_only=True)
    coleta = wb["Coleta de Dados"]
    cert = wb["Emiss√£o do Certificado"]
    incerteza = wb["Estimativa da Incerteza"]
    
    # Linhas dos pontos de calibra√ß√£o
    linhas = [54, 55, 56]
    
    # 1. Dados de Coleta
    print("\nüìä DADOS DE COLETA (EXATOS):")
    dados_coleta = {}
    
    for linha in linhas:
        # Coluna C (3) - Pulsos padr√£o
        pulsos = ler_valor_exato(coleta, linha, 3)
        
        # Coluna F (6) - Tempo de coleta (MANTER COMO INTEIRO)
        tempo = ler_valor_exato(coleta, linha, 6)
        tempo_inteiro = Decimal(str(int(tempo)))
        
        # Coluna I (9) - Volume corrigido
        volume_corrigido = ler_valor_exato(coleta, linha, 9)
        
        # Coluna O (15) - Leitura medidor
        leitura_medidor = ler_valor_exato(coleta, linha, 15)
        
        # Coluna R (18) - Temperatura
        temperatura = ler_valor_exato(coleta, linha, 18)
        
        dados_coleta[f"linha_{linha}"] = {
            "pulsos_padrao": pulsos,
            "tempo_coleta": tempo_inteiro,  # ‚úÖ Mantido como inteiro
            "volume_corrigido": volume_corrigido,
            "leitura_medidor": leitura_medidor,
            "temperatura": temperatura
        }
        
        print(f"   Linha {linha}:")
        print(f"     Pulsos: {pulsos}")
        print(f"     Tempo: {tempo_inteiro} ‚úÖ (inteiro)")
        print(f"     Volume Corrigido: {volume_corrigido}")
        print(f"     Leitura Medidor: {leitura_medidor}")
        print(f"     Temperatura: {temperatura}")
    
    # 2. Certificado (linha 74)
    print(f"\nüìã CERTIFICADO (LINHA 74):")
    linha_cert = 74
    
    vazao_padrao_cert = ler_valor_exato(cert, linha_cert, 6)   # F74 - Vaz√£o Padr√£o
    volume_corrigido_cert = ler_valor_exato(cert, linha_cert, 9)  # I74 - Volume Corrigido
    vazao_medidor_cert = ler_valor_exato(cert, linha_cert, 15)  # O74 - Vaz√£o Medidor
    
    certificado = {
        "vazao_padrao": vazao_padrao_cert,
        "volume_corrigido": volume_corrigido_cert,
        "vazao_medidor": vazao_medidor_cert
    }
    
    print(f"   Vaz√£o Padr√£o (F74): {vazao_padrao_cert}")
    print(f"   Volume Corrigido (I74): {volume_corrigido_cert}")
    print(f"   Vaz√£o Medidor (O74): {vazao_medidor_cert}")
    
    # 3. Configura√ß√µes de Incerteza
    casas_decimais = int(incerteza["BQ10"].value)
    print(f"\n‚öôÔ∏è  CONFIGURA√á√ïES:")
    print(f"   Casas decimais para arredondamento: {casas_decimais}")
    
    return dados_coleta, certificado, casas_decimais

def calcular_medias_exatas(dados_coleta):
    """
    Calcula m√©dias exatas dos dados de coleta
    """
    print(f"\nüßÆ CALCULANDO M√âDIAS EXATAS:")
    
    # Extrair valores
    volumes = [dados_coleta[f"linha_{linha}"]["volume_corrigido"] for linha in [54, 55, 56]]
    leituras = [dados_coleta[f"linha_{linha}"]["leitura_medidor"] for linha in [54, 55, 56]]
    tempos = [dados_coleta[f"linha_{linha}"]["tempo_coleta"] for linha in [54, 55, 56]]
    
    # Calcular m√©dias com precis√£o m√°xima
    media_volume = sum(volumes) / Decimal('3')
    media_leitura = sum(leituras) / Decimal('3')
    media_tempo = sum(tempos) / Decimal('3')
    
    print(f"   M√©dia Volume Corrigido: {media_volume}")
    print(f"   M√©dia Leitura Medidor: {media_leitura}")
    print(f"   M√©dia Tempo: {media_tempo}")
    
    return {
        "media_volume": media_volume,
        "media_leitura": media_leitura,
        "media_tempo": media_tempo
    }

def arredondar_exato(valor, casas_decimais):
    """
    Arredonda valor exatamente como o Excel
    """
    fator = Decimal('1e-' + str(casas_decimais))
    return valor.quantize(fator)

def comparar_com_certificado(medias_exatas, certificado, casas_decimais):
    """
    Compara valores calculados com certificado
    """
    print(f"\nüîç COMPARANDO COM CERTIFICADO:")
    
    # Arredondar m√©dias
    volume_corrigido_calc = arredondar_exato(medias_exatas["media_volume"], casas_decimais)
    vazao_medidor_calc = arredondar_exato(medias_exatas["media_leitura"], casas_decimais)
    
    # Valores do certificado
    volume_corrigido_cert = certificado["volume_corrigido"]
    vazao_medidor_cert = certificado["vazao_medidor"]
    
    print(f"   Volume Corrigido: {volume_corrigido_calc} vs {volume_corrigido_cert}")
    print(f"   Vaz√£o Medidor: {vazao_medidor_calc} vs {vazao_medidor_cert}")
    
    # Verificar se s√£o id√™nticos
    identico_volume = volume_corrigido_calc == volume_corrigido_cert
    identico_medidor = vazao_medidor_calc == vazao_medidor_cert
    
    print(f"\n   Resultado:")
    print(f"     Volume Corrigido: {'‚úÖ ID√äNTICO' if identico_volume else '‚ùå DIFERENTE'}")
    print(f"     Vaz√£o Medidor: {'‚úÖ ID√äNTICO' if identico_medidor else '‚ùå DIFERENTE'}")
    
    return {
        "identico_volume": identico_volume,
        "identico_medidor": identico_medidor,
        "volume_corrigido_calc": volume_corrigido_calc,
        "vazao_medidor_calc": vazao_medidor_calc
    }

def gerar_relatorio_final(dados_coleta, certificado, medias_exatas, comparacao):
    """
    Gera relat√≥rio final completo
    """
    print(f"\nüìÑ GERANDO RELAT√ìRIO FINAL...")
    
    relatorio = {
        "dados_coleta": dados_coleta,
        "certificado": certificado,
        "medias_calculadas": medias_exatas,
        "comparacao": comparacao,
        "timestamp": str(pd.Timestamp.now()),
        "precisao": "Decimal com 28 d√≠gitos",
        "tempos_inteiros": True
    }
    
    # Salvar em JSON
    with open("relatorio_final_precisao.json", "w", encoding="utf-8") as f:
        json.dump(relatorio, f, indent=2, ensure_ascii=False, default=str)
    
    # Salvar relat√≥rio leg√≠vel
    with open("relatorio_final_precisao.txt", "w", encoding="utf-8") as f:
        f.write("=== RELAT√ìRIO FINAL - PRECIS√ÉO M√ÅXIMA E TEMPOS INTEIROS ===\n\n")
        
        f.write("‚úÖ CONFIGURA√á√ïES:\n")
        f.write("   ‚Ä¢ Precis√£o: Decimal com 28 d√≠gitos\n")
        f.write("   ‚Ä¢ Tempos de coleta: Mantidos como inteiros\n")
        f.write("   ‚Ä¢ Formato brasileiro: Tratado corretamente\n\n")
        
        f.write("üìä DADOS DE COLETA (EXATOS):\n")
        for linha in [54, 55, 56]:
            dados = dados_coleta[f"linha_{linha}"]
            f.write(f"   Linha {linha}:\n")
            f.write(f"     Pulsos Padr√£o: {dados['pulsos_padrao']}\n")
            f.write(f"     Tempo Coleta: {dados['tempo_coleta']} ‚úÖ (inteiro)\n")
            f.write(f"     Volume Corrigido: {dados['volume_corrigido']}\n")
            f.write(f"     Leitura Medidor: {dados['leitura_medidor']}\n")
            f.write(f"     Temperatura: {dados['temperatura']}\n\n")
        
        f.write("üìã CERTIFICADO (LINHA 74):\n")
        f.write(f"   Vaz√£o Padr√£o (F74): {certificado['vazao_padrao']}\n")
        f.write(f"   Volume Corrigido (I74): {certificado['volume_corrigido']}\n")
        f.write(f"   Vaz√£o Medidor (O74): {certificado['vazao_medidor']}\n\n")
        
        f.write("üßÆ M√âDIAS CALCULADAS:\n")
        f.write(f"   Volume Corrigido: {medias_exatas['media_volume']}\n")
        f.write(f"   Leitura Medidor: {medias_exatas['media_leitura']}\n")
        f.write(f"   Tempo: {medias_exatas['media_tempo']}\n\n")
        
        f.write("üîç COMPARA√á√ÉO:\n")
        f.write(f"   Volume Corrigido: {comparacao['volume_corrigido_calc']} vs {certificado['volume_corrigido']}\n")
        f.write(f"   Vaz√£o Medidor: {comparacao['vazao_medidor_calc']} vs {certificado['vazao_medidor']}\n\n")
        
        f.write("‚úÖ RESULTADO FINAL:\n")
        if comparacao['identico_volume']:
            f.write("   üéâ VOLUME CORRIGIDO: ID√äNTICO AO CERTIFICADO!\n")
        else:
            f.write("   ‚ö†Ô∏è  VOLUME CORRIGIDO: DIFERENTE DO CERTIFICADO\n")
        
        if comparacao['identico_medidor']:
            f.write("   üéâ VAZ√ÉO MEDIDOR: ID√äNTICA AO CERTIFICADO!\n")
        else:
            f.write("   ‚ö†Ô∏è  VAZ√ÉO MEDIDOR: DIFERENTE DO CERTIFICADO\n")
        
        f.write(f"\nüìã RESUMO:\n")
        f.write(f"   ‚Ä¢ Tempos de coleta: ‚úÖ Mantidos como inteiros\n")
        f.write(f"   ‚Ä¢ Precis√£o: ‚úÖ Decimal com 28 d√≠gitos\n")
        f.write(f"   ‚Ä¢ Volume Corrigido: {'‚úÖ ID√äNTICO' if comparacao['identico_volume'] else '‚ùå DIFERENTE'}\n")
        f.write(f"   ‚Ä¢ Vaz√£o Medidor: {'‚úÖ ID√äNTICA' if comparacao['identico_medidor'] else '‚ùå DIFERENTE'}\n")
    
    print("   ‚úÖ Relat√≥rios salvos em 'relatorio_final_precisao.json' e 'relatorio_final_precisao.txt'")

def main():
    """
    Fun√ß√£o principal
    """
    print("SCRIPT FINAL - PRECIS√ÉO M√ÅXIMA E TEMPOS INTEIROS")
    print("=" * 60)
    
    try:
        # 1. Ler dados completos
        dados_coleta, certificado, casas_decimais = ler_dados_completos()
        
        # 2. Calcular m√©dias exatas
        medias_exatas = calcular_medias_exatas(dados_coleta)
        
        # 3. Comparar com certificado
        comparacao = comparar_com_certificado(medias_exatas, certificado, casas_decimais)
        
        # 4. Gerar relat√≥rio final
        gerar_relatorio_final(dados_coleta, certificado, medias_exatas, comparacao)
        
        print(f"\nüéØ CONCLUS√ÉO FINAL:")
        print(f"   ‚úÖ TEMPOS DE COLETA: Mantidos como inteiros")
        print(f"   ‚úÖ PRECIS√ÉO: Decimal com 28 d√≠gitos")
        print(f"   ‚úÖ VOLUME CORRIGIDO: {'ID√äNTICO' if comparacao['identico_volume'] else 'DIFERENTE'} ao certificado")
        print(f"   ‚úÖ VAZ√ÉO MEDIDOR: {'ID√äNTICA' if comparacao['identico_medidor'] else 'DIFERENTE'} ao certificado")
        
        if comparacao['identico_volume']:
            print(f"\nüéâ SUCESSO: Volume Corrigido √© ID√äNTICO ao certificado!")
            print(f"   Isso garante que os valores est√£o sendo lidos corretamente.")
        
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 