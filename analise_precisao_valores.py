# -*- coding: utf-8 -*-
"""
AN√ÅLISE DE PRECIS√ÉO E LEITURA DE VALORES
========================================

Este script analisa como cada script est√° lendo valores num√©ricos
e verifica a precis√£o m√°xima que conseguem alcan√ßar.
"""

import pandas as pd
from decimal import Decimal, getcontext
from openpyxl import load_workbook
import json

# Configurar precis√£o m√°xima para an√°lise
getcontext().prec = 50

def analisar_valores_planilha():
    """Analisa os valores reais da planilha para verificar formato e precis√£o"""
    print("=== AN√ÅLISE DOS VALORES REAIS DA PLANILHA ===")
    
    wb = load_workbook("SAN-038-25-09-1.xlsx", data_only=True)
    coleta = wb["Coleta de Dados"]
    cert = wb["Emiss√£o do Certificado"]
    
    # Valores importantes para an√°lise
    valores_teste = [
        ("Coleta C54", coleta, 54, 3),   # Pulsos padr√£o
        ("Coleta F54", coleta, 54, 6),   # Tempo de coleta
        ("Coleta I54", coleta, 54, 9),   # Volume corrigido
        ("Coleta O54", coleta, 54, 15),  # Leitura medidor
        ("Coleta R54", coleta, 54, 18),  # Temperatura
        ("Cert F74", cert, 74, 6),       # Vaz√£o padr√£o certificado
        ("Cert I74", cert, 74, 9),       # Volume corrigido certificado
        ("Cert O74", cert, 74, 15),      # Vaz√£o medidor certificado
    ]
    
    print(f"{'Localiza√ß√£o':<20} {'Valor Bruto':<25} {'Tipo':<15} {'Representa√ß√£o':<30} {'Casas Decimais':<15}")
    print("-" * 110)
    
    max_casas = 0
    valores_analisados = {}
    
    for nome, sheet, linha, coluna in valores_teste:
        valor_bruto = sheet.cell(row=linha, column=coluna).value
        
        # An√°lise detalhada do valor
        if valor_bruto is None:
            tipo_valor = "None"
            representacao = "None"
            casas_decimais = 0
        elif isinstance(valor_bruto, str):
            tipo_valor = "String"
            representacao = repr(valor_bruto)
            # Conta casas decimais na string
            if ',' in valor_bruto:
                partes = valor_bruto.split(',')
                if len(partes) > 1:
                    casas_decimais = len(partes[1])
                else:
                    casas_decimais = 0
            elif '.' in valor_bruto:
                partes = valor_bruto.split('.')
                if len(partes) > 1:
                    casas_decimais = len(partes[1])
                else:
                    casas_decimais = 0
            else:
                casas_decimais = 0
        elif isinstance(valor_bruto, (int, float)):
            tipo_valor = type(valor_bruto).__name__
            representacao = repr(valor_bruto)
            # Para n√∫meros, conta casas decimais
            str_valor = str(valor_bruto)
            if '.' in str_valor:
                partes = str_valor.split('.')
                casas_decimais = len(partes[1])
            else:
                casas_decimais = 0
        else:
            tipo_valor = type(valor_bruto).__name__
            representacao = repr(valor_bruto)
            casas_decimais = 0
        
        print(f"{nome:<20} {str(valor_bruto):<25} {tipo_valor:<15} {representacao:<30} {casas_decimais:<15}")
        
        valores_analisados[nome] = {
            'valor_bruto': valor_bruto,
            'tipo': tipo_valor,
            'representacao': representacao,
            'casas_decimais': casas_decimais
        }
        
        if casas_decimais > max_casas:
            max_casas = casas_decimais
    
    print(f"\nüìä RESUMO DA AN√ÅLISE:")
    print(f"   ‚Ä¢ M√°ximo de casas decimais encontradas: {max_casas}")
    print(f"   ‚Ä¢ Valores com v√≠rgula como separador: {sum(1 for v in valores_analisados.values() if isinstance(v['valor_bruto'], str) and ',' in str(v['valor_bruto']))}")
    print(f"   ‚Ä¢ Valores com ponto como separador: {sum(1 for v in valores_analisados.values() if isinstance(v['valor_bruto'], str) and '.' in str(v['valor_bruto']))}")
    
    return valores_analisados, max_casas

def testar_funcoes_conversao():
    """Testa as diferentes fun√ß√µes de convers√£o dos scripts"""
    print("\n=== TESTE DAS FUN√á√ïES DE CONVERS√ÉO ===")
    
    # Valores de teste com diferentes formatos
    valores_teste = [
        "33.957,90",    # Formato brasileiro
        "33957.90",     # Formato americano
        "33,957.90",    # Formato com v√≠rgula de milhares
        "33957,90",     # Formato brasileiro sem pontos
        "0.19488768926220715",  # N√∫mero com muitas casas
        "0,19488768926220715",  # N√∫mero brasileiro com muitas casas
        33858.49554066015,      # Float
        7947,                   # Inteiro
        None,                   # Valor nulo
    ]
    
    print(f"{'Valor Original':<25} {'Tipo':<10} {'Simula√ß√£o':<25} {'Extrator':<25} {'Script Corrigido':<25}")
    print("-" * 110)
    
    # Fun√ß√£o do simulacao.py
    def converter_para_decimal_simulacao(valor):
        if valor is None:
            return Decimal('0')
        if isinstance(valor, str):
            valor_limpo = valor.replace(' ', '').replace('.', '').replace(',', '.')
            return Decimal(valor_limpo)
        return Decimal(str(valor))
    
    # Fun√ß√£o do extrator_pontos_calibracao.py
    def get_numeric_value_extrator(valor):
        if valor is None:
            return Decimal('0')
        return Decimal(str(valor))
    
    # Fun√ß√£o do script_corrigido.py
    def get_numeric_value_script(valor):
        if valor is None:
            return None
        if isinstance(valor, (int, float)):
            return float(valor)
        if isinstance(valor, str):
            valor_limpo = valor.strip().replace(',', '.')
            if valor_limpo.replace('.', '').replace('-', '').isdigit():
                return float(valor_limpo)
        return None
    
    for valor in valores_teste:
        try:
            sim = converter_para_decimal_simulacao(valor)
            ext = get_numeric_value_extrator(valor)
            scr = get_numeric_value_script(valor)
            
            print(f"{str(valor):<25} {type(valor).__name__:<10} {str(sim):<25} {str(ext):<25} {str(scr):<25}")
        except Exception as e:
            print(f"{str(valor):<25} {type(valor).__name__:<10} {'ERRO':<25} {'ERRO':<25} {'ERRO':<25}")

def testar_precisao_decimal():
    """Testa a precis√£o m√°xima do Decimal"""
    print("\n=== TESTE DE PRECIS√ÉO DECIMAL ===")
    
    # Testa diferentes precis√µes
    precisoes = [15, 28, 50, 100]
    
    for prec in precisoes:
        getcontext().prec = prec
        valor_teste = Decimal('0.19488768926220715')
        print(f"Precis√£o {prec:3d}: {valor_teste}")
    
    # Testa com valores da planilha
    print(f"\n--- TESTE COM VALORES REAIS DA PLANILHA ---")
    wb = load_workbook("SAN-038-25-09-1.xlsx", data_only=True)
    cert = wb["Emiss√£o do Certificado"]
    
    # Valor do certificado
    valor_cert = cert.cell(row=74, column=15).value  # O74
    print(f"Valor bruto do certificado: {valor_cert} (tipo: {type(valor_cert)})")
    
    # Testa convers√£o com diferentes precis√µes
    for prec in [15, 28, 50]:
        getcontext().prec = prec
        try:
            if isinstance(valor_cert, str):
                # Remove pontos de milhares e substitui v√≠rgula por ponto
                valor_limpo = valor_cert.replace(' ', '').replace('.', '').replace(',', '.')
                decimal_valor = Decimal(valor_limpo)
            else:
                decimal_valor = Decimal(str(valor_cert))
            print(f"Precis√£o {prec:2d}: {decimal_valor}")
        except Exception as e:
            print(f"Precis√£o {prec:2d}: ERRO - {e}")

def analisar_scripts_existentes():
    """Analisa como os scripts existentes tratam os valores"""
    print("\n=== AN√ÅLISE DOS SCRIPTS EXISTENTES ===")
    
    scripts_info = {
        "simulacao.py": {
            "precisao": 28,
            "funcao_conversao": "converter_para_decimal",
            "tratamento_virgula": "Remove pontos de milhares e substitui v√≠rgula por ponto",
            "biblioteca": "openpyxl"
        },
        "extrator_pontos_calibracao.py": {
            "precisao": 15,
            "funcao_conversao": "get_numeric_value",
            "tratamento_virgula": "Usa Decimal(str(valor)) diretamente",
            "biblioteca": "pandas"
        },
        "script_corrigido.py": {
            "precisao": 28,
            "funcao_conversao": "get_numeric_value",
            "tratamento_virgula": "Substitui v√≠rgula por ponto, retorna float",
            "biblioteca": "pandas"
        },
        "extrator_dados_certificado.py": {
            "precisao": "N√£o especificada",
            "funcao_conversao": "N√£o tem convers√£o espec√≠fica",
            "tratamento_virgula": "Usa pandas diretamente",
            "biblioteca": "pandas"
        }
    }
    
    print(f"{'Script':<30} {'Precis√£o':<15} {'Fun√ß√£o':<25} {'Tratamento V√≠rgula':<40}")
    print("-" * 110)
    
    for script, info in scripts_info.items():
        print(f"{script:<30} {str(info['precisao']):<15} {info['funcao_conversao']:<25} {info['tratamento_virgula']:<40}")

def gerar_recomendacoes():
    """Gera recomenda√ß√µes baseadas na an√°lise"""
    print("\n=== RECOMENDA√á√ïES ===")
    
    print("üîç PROBLEMAS IDENTIFICADOS:")
    print("   1. Inconsist√™ncia no tratamento de v√≠rgulas entre scripts")
    print("   2. Diferentes precis√µes decimais (15 vs 28)")
    print("   3. Alguns scripts n√£o tratam formato brasileiro")
    print("   4. Falta de padroniza√ß√£o na convers√£o de valores")
    
    print("\n‚úÖ RECOMENDA√á√ïES:")
    print("   1. Padronizar fun√ß√£o de convers√£o em todos os scripts")
    print("   2. Usar precis√£o Decimal de 28 em todos os scripts")
    print("   3. Implementar tratamento consistente para formato brasileiro")
    print("   4. Criar fun√ß√£o √∫nica de convers√£o reutiliz√°vel")
    print("   5. Validar precis√£o m√°xima necess√°ria para os c√°lculos")
    
    print("\nüìã FUN√á√ÉO RECOMENDADA:")
    print("""
def converter_para_decimal_padrao(valor):
    \"\"\"Fun√ß√£o padronizada para converter valores para Decimal\"\"\"
    if valor is None:
        return Decimal('0')
    
    if isinstance(valor, str):
        # Remove espa√ßos e pontos de milhares, substitui v√≠rgula por ponto
        valor_limpo = valor.replace(' ', '').replace('.', '').replace(',', '.')
        return Decimal(valor_limpo)
    
    return Decimal(str(valor))
    """)

def main():
    """Fun√ß√£o principal"""
    print("AN√ÅLISE DE PRECIS√ÉO E LEITURA DE VALORES")
    print("=" * 60)
    
    # 1. Analisar valores reais da planilha
    valores_analisados, max_casas = analisar_valores_planilha()
    
    # 2. Testar fun√ß√µes de convers√£o
    testar_funcoes_conversao()
    
    # 3. Testar precis√£o decimal
    testar_precisao_decimal()
    
    # 4. Analisar scripts existentes
    analisar_scripts_existentes()
    
    # 5. Gerar recomenda√ß√µes
    gerar_recomendacoes()
    
    # 6. Salvar relat√≥rio
    relatorio = {
        "max_casas_decimais": max_casas,
        "valores_analisados": valores_analisados,
        "recomendacoes": {
            "precisao_recomendada": 28,
            "funcao_padrao": "converter_para_decimal_padrao",
            "tratamento_virgula": "Remove pontos de milhares e substitui v√≠rgula por ponto"
        }
    }
    
    with open("relatorio_precisao.json", "w", encoding="utf-8") as f:
        json.dump(relatorio, f, indent=2, ensure_ascii=False, default=str)
    
    print(f"\nüìÑ Relat√≥rio salvo em 'relatorio_precisao.json'")

if __name__ == "__main__":
    main() 